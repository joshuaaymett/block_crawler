"""
This script is used to query the database generated by block_crawler.py to find the
block with the largest volume between dates (inclusive) 2024-01-01 00:00:00 and 2024-01-01 00:30:00.
"""

import sqlite3
import click

QUERY_START_DATE: str = "2024-01-01 00:00:00"
QUERY_END_DATE: str = "2024-01-01 00:30:00"


class SumHex:
    """
    UDF sums in hex instead of integer to prevent error: sqlite3.DataError: string or blob too big
    """

    def __init__(self):
        self.count = "0x0"

    def step(self, value):
        self.count = hex(int(self.count, 16) + int(value, 16))

    def finalize(self):
        return self.count


@click.command()
@click.option(
    "--db-path",
    help="The path of the SQLite file to write to \
        (e.g. db.sqlite3)",
)
def find_largest_volume(db_path: str):
    con = sqlite3.connect(db_path)
    con.create_aggregate("hexsum", 1, SumHex)
    cur = con.cursor()
    query = f"""
        SELECT block.number, hexsum("transaction"."value") AS transum from "transaction" JOIN block
            WHERE block.hash = "transaction"."blockHash" AND block.timestamp BETWEEN '{QUERY_START_DATE}' AND '{QUERY_END_DATE}'
            GROUP BY(block.hash)
    """
    cur.execute(query)
    result = sorted(cur.fetchall(), key=lambda x: int(x[1], 16), reverse=True)[0]

    print(
        f"Block {int(result[0], 16)} is the largest block in date range {QUERY_START_DATE} through {QUERY_END_DATE}"
        + f" with volume {int(result[1], 16)} Wei"
    )
    con.close()


if __name__ == "__main__":
    find_largest_volume()
